{
  "version": 3,
  "sources": ["../../money/money.js"],
  "sourcesContent": ["/*!\n * money.js / fx() v0.2\n * Copyright 2014 Open Exchange Rates\n *\n * JavaScript library for realtime currency conversion and exchange rate calculation.\n *\n * Freely distributable under the MIT license.\n * Portions of money.js are inspired by or borrowed from underscore.js\n *\n * For details, examples and documentation:\n * http://openexchangerates.github.io/money.js/\n */\n(function(root, undefined) {\n\n\t// Create a safe reference to the money.js object for use below.\n\tvar fx = function(obj) {\n\t\treturn new fxWrapper(obj);\n\t};\n\n\t// Current version.\n\tfx.version = '0.2';\n\n\n\t/* --- Setup --- */\n\n\t// fxSetup can be defined before loading money.js, to set the exchange rates and the base\n\t// (and default from/to) currencies - or the rates can be loaded in later if needed.\n\tvar fxSetup = root.fxSetup || {\n\t\trates : {},\n\t\tbase : \"\"\n\t};\n\n\t// Object containing exchange rates relative to the fx.base currency, eg { \"GBP\" : \"0.64\" }\n\tfx.rates = fxSetup.rates;\n\n\t// Default exchange rate base currency (eg \"USD\"), which all the exchange rates are relative to\n\tfx.base = fxSetup.base;\n\n\t// Default from / to currencies for conversion via fx.convert():\n\tfx.settings = {\n\t\tfrom : fxSetup.from || fx.base,\n\t\tto : fxSetup.to || fx.base\n\t};\n\n\n\t/* --- Conversion --- */\n\n\t// The base function of the library: converts a value from one currency to another\n\tvar convert = fx.convert = function(val, opts) {\n\t\t// Convert arrays recursively\n\t\tif (typeof val === 'object' && val.length) {\n\t\t\tfor (var i = 0; i< val.length; i++ ) {\n\t\t\t\tval[i] = convert(val[i], opts);\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\n\t\t// Make sure we gots some opts\n\t\topts = opts || {};\n\n\t\t// We need to know the `from` and `to` currencies\n\t\tif( !opts.from ) opts.from = fx.settings.from;\n\t\tif( !opts.to ) opts.to = fx.settings.to;\n\n\t\t// Multiple the value by the exchange rate\n\t\treturn val * getRate( opts.to, opts.from );\n\t};\n\n\t// Returns the exchange rate to `target` currency from `base` currency\n\tvar getRate = function(to, from) {\n\t\t// Save bytes in minified version\n\t\tvar rates = fx.rates;\n\n\t\t// Make sure the base rate is in the rates object:\n\t\trates[fx.base] = 1;\n\n\t\t// Throw an error if either rate isn't in the rates array\n\t\tif ( !rates[to] || !rates[from] ) throw \"fx error\";\n\n\t\t// If `from` currency === fx.base, return the basic exchange rate for the `to` currency\n\t\tif ( from === fx.base ) {\n\t\t\treturn rates[to];\n\t\t}\n\n\t\t// If `to` currency === fx.base, return the basic inverse rate of the `from` currency\n\t\tif ( to === fx.base ) {\n\t\t\treturn 1 / rates[from];\n\t\t}\n\n\t\t// Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the\n\t\t// relative exchange rate between the two currencies\n\t\treturn rates[to] * (1 / rates[from]);\n\t};\n\n\n\t/* --- OOP wrapper and chaining --- */\n\n\t// If fx(val) is called as a function, it returns a wrapped object that can be used OO-style\n\tvar fxWrapper = function(val) {\n\t\t// Experimental: parse strings to pull out currency code and value:\n\t\tif ( typeof\tval === \"string\" ) {\n\t\t\tthis._v = parseFloat(val.replace(/[^0-9-.]/g, \"\"));\n\t\t\tthis._fx = val.replace(/([^A-Za-z])/g, \"\");\n\t\t} else {\n\t\t\tthis._v = val;\n\t\t}\n\t};\n\n\t// Expose `wrapper.prototype` as `fx.prototype`\n\tvar fxProto = fx.prototype = fxWrapper.prototype;\n\n\t// fx(val).convert(opts) does the same thing as fx.convert(val, opts)\n\tfxProto.convert = function() {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.unshift(this._v);\n\t\treturn convert.apply(fx, args);\n\t};\n\n\t// fx(val).from(currency) returns a wrapped `fx` where the value has been converted from\n\t// `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`\n\tfxProto.from = function(currency) {\n\t\tvar wrapped = fx(convert(this._v, {from: currency, to: fx.base}));\n\t\twrapped._fx = fx.base;\n\t\treturn wrapped;\n\t};\n\n\t// fx(val).to(currency) returns the value, converted from `fx.base` to `currency`\n\tfxProto.to = function(currency) {\n\t\treturn convert(this._v, {from: this._fx ? this._fx : fx.settings.from, to: currency});\n\t};\n\n\n\t/* --- Module Definition --- */\n\n\t// Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `fx` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = fx;\n\t\t}\n\t\texports.fx = fx;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn fx;\n\t\t});\n\t} else {\n\t\t// Use fx.noConflict to restore `fx` back to its original value before money.js loaded.\n\t\t// Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`\n\t\tfx.noConflict = (function(previousFx) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `fx` variable:\n\t\t\t\troot.fx = previousFx;\n\t\t\t\t// Delete the noConflict function:\n\t\t\t\tfx.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn fx;\n\t\t\t};\n\t\t})(root.fx);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['fx'] = fx;\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n"],
  "mappings": ";;;;;AAAA;AAAA;AAYA,KAAC,SAAS,MAAM,WAAW;AAG1B,UAAI,KAAK,SAAS,KAAK;AACtB,eAAO,IAAI,UAAU,GAAG;AAAA,MACzB;AAGA,SAAG,UAAU;AAOb,UAAI,UAAU,KAAK,WAAW;AAAA,QAC7B,OAAQ,CAAC;AAAA,QACT,MAAO;AAAA,MACR;AAGA,SAAG,QAAQ,QAAQ;AAGnB,SAAG,OAAO,QAAQ;AAGlB,SAAG,WAAW;AAAA,QACb,MAAO,QAAQ,QAAQ,GAAG;AAAA,QAC1B,IAAK,QAAQ,MAAM,GAAG;AAAA,MACvB;AAMA,UAAI,UAAU,GAAG,UAAU,SAAS,KAAK,MAAM;AAE9C,YAAI,OAAO,QAAQ,YAAY,IAAI,QAAQ;AAC1C,mBAAS,IAAI,GAAG,IAAG,IAAI,QAAQ,KAAM;AACpC,gBAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,GAAG,IAAI;AAAA,UAC9B;AACA,iBAAO;AAAA,QACR;AAGA,eAAO,QAAQ,CAAC;AAGhB,YAAI,CAAC,KAAK,KAAO,MAAK,OAAO,GAAG,SAAS;AACzC,YAAI,CAAC,KAAK,GAAK,MAAK,KAAK,GAAG,SAAS;AAGrC,eAAO,MAAM,QAAS,KAAK,IAAI,KAAK,IAAK;AAAA,MAC1C;AAGA,UAAI,UAAU,SAAS,IAAI,MAAM;AAEhC,YAAI,QAAQ,GAAG;AAGf,cAAM,GAAG,IAAI,IAAI;AAGjB,YAAK,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,IAAI,EAAI,OAAM;AAGxC,YAAK,SAAS,GAAG,MAAO;AACvB,iBAAO,MAAM,EAAE;AAAA,QAChB;AAGA,YAAK,OAAO,GAAG,MAAO;AACrB,iBAAO,IAAI,MAAM,IAAI;AAAA,QACtB;AAIA,eAAO,MAAM,EAAE,KAAK,IAAI,MAAM,IAAI;AAAA,MACnC;AAMA,UAAI,YAAY,SAAS,KAAK;AAE7B,YAAK,OAAO,QAAQ,UAAW;AAC9B,eAAK,KAAK,WAAW,IAAI,QAAQ,aAAa,EAAE,CAAC;AACjD,eAAK,MAAM,IAAI,QAAQ,gBAAgB,EAAE;AAAA,QAC1C,OAAO;AACN,eAAK,KAAK;AAAA,QACX;AAAA,MACD;AAGA,UAAI,UAAU,GAAG,YAAY,UAAU;AAGvC,cAAQ,UAAU,WAAW;AAC5B,YAAI,OAAO,MAAM,UAAU,MAAM,KAAK,SAAS;AAC/C,aAAK,QAAQ,KAAK,EAAE;AACpB,eAAO,QAAQ,MAAM,IAAI,IAAI;AAAA,MAC9B;AAIA,cAAQ,OAAO,SAAS,UAAU;AACjC,YAAI,UAAU,GAAG,QAAQ,KAAK,IAAI,EAAC,MAAM,UAAU,IAAI,GAAG,KAAI,CAAC,CAAC;AAChE,gBAAQ,MAAM,GAAG;AACjB,eAAO;AAAA,MACR;AAGA,cAAQ,KAAK,SAAS,UAAU;AAC/B,eAAO,QAAQ,KAAK,IAAI,EAAC,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG,SAAS,MAAM,IAAI,SAAQ,CAAC;AAAA,MACrF;AAOA,UAAI,OAAO,YAAY,aAAa;AACnC,YAAI,OAAO,WAAW,eAAe,OAAO,SAAS;AACpD,oBAAU,OAAO,UAAU;AAAA,QAC5B;AACA,gBAAQ,KAAK;AAAA,MACd,WAAW,OAAO,WAAW,cAAc,OAAO,KAAK;AAEtD,eAAO,CAAC,GAAG,WAAW;AACrB,iBAAO;AAAA,QACR,CAAC;AAAA,MACF,OAAO;AAGN,WAAG,aAAc,yBAAS,YAAY;AACrC,iBAAO,WAAW;AAEjB,iBAAK,KAAK;AAEV,eAAG,aAAa;AAEhB,mBAAO;AAAA,UACR;AAAA,QACD,EAAG,KAAK,EAAE;AAGV,aAAK,IAAI,IAAI;AAAA,MACd;AAAA,IAGD,GAAE,OAAI;AAAA;AAAA;",
  "names": []
}
